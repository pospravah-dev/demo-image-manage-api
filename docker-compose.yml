#version: '3.8'

services:
  postgres:
    image: postgres:16.6
    container_name: postgres-imagedata
    environment:
      POSTGRES_DB: imagedata
      POSTGRES_USER: imageusername
      POSTGRES_PASSWORD: imagepassword
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app_network

  kafka:
    image: 'docker.io/bitnami/kafka:3.9'
    container_name: kafka-imagedata
    ports:
      - "9092:9092"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - app_network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: demo-image-manage-api
    environment:
      - SPRING_APPLICATION_NAME=demo-image-manage-api
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres:5432/imagedata
      - SPRING_R2DBC_USERNAME=imageusername
      - SPRING_R2DBC_PASSWORD=imagepassword
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - kafka
    volumes:
      - app-data:/usr/src/app
    working_dir: /usr/src/app
    networks:
      - app_network

volumes:
  postgres-data:
  kafka-data:
  app-data:

networks:
  app_network:
    driver: bridge